2.7. String Methods
A string holds characters in a sequence. Each character is at a position or index which starts with 0 as shown below. An index is a number associated with a position in a string. The length of a string is the number of characters in it including any spaces or special characters. The string below has a length of 14.

Figure 1: A string with the position (index) shown above each character
Note
The first character in a string is at index 0 and the last characters is at length -1.
For the AP CS A exam, you only need to know how to use the following String methods. All of the String method descriptions are included in the AP CS A Java Quick Reference Sheet that you get during the exam so you don’t have to memorize these.
• int length() method returns the number of characters in the string, including spaces and special characters like punctuation.
• String substring(int from, int to) method returns a new string with the characters in the current string starting with the character at the from index and ending at the character before the to index (if the to index is specified, and if not specified it will contain the rest of the string).
• int indexOf(String str) method searches for the string str in the current string and returns the index of the beginning of str in the current string or -1 if it isn’t found.
• int compareTo(String other) returns a negative value if the current string is less than the other string alphabetically, 0 if they have the same characters in the same order, and a positive value if the current string is greater than the other string alphabetically.
• boolean equals(String other) returns true when the characters in the current string are the same as the ones in the other string. This method is inherited from the Object class, but is overridden which means that the String class has its own version of that method.
2.7.1. String Methods: length, substring, indexOf
Run the code below to see the output from the String methods length, substring, and indexOf. The length method returns the number of characters in the string, not the last index which is length -1. The str.substring(from,to) method returns the substring from the from index up to (but not including) the to index. The method str.indexOf(substring) searches for the substring in str and returns the index of where it finds substring in str or -1 if it is not there.
This code shows the output from String methods length, substring, and indexOf. How many letters does substring(0,3) return? What does indexOf return when its argument is not found?
1
public class Test1
2
{
3
   public static void main(String[] args)
4
   {
5
     String message1 = "This is a test";
6
     String message2 = "Hello Class";
7
​
8
     System.out.println(message1.length());
9
     System.out.println(message2.length());
10
​
11
     System.out.println(message1.substring(0,3));
12
     System.out.println(message1.substring(2,3));
13
     System.out.println(message1.substring(5));
14
​
15
     System.out.println(message1.indexOf("is")); // This will match the is in "This"!
16
     System.out.println(message1.indexOf("Hello"));
17
     System.out.println(message2.indexOf("Hello"));
18
​
19
     // lowercase and uppercase are not on the AP exam, but still useful
20
     System.out.println(message2.toLowerCase());
21
     System.out.println(message2.toUpperCase());
22
   }
23
}
24
​
Activity: 2.7.1.1 ActiveCode (lcsm1)
Note
Remember that substring(from,to) does not include the character at the to index! To return a single character at index i, use str.substring(index, index + 1).
 Check your understanding
2-7-2: What is the value of pos after the following code executes?
String s1 = "abccba";
int pos = s1.indexOf("b");
( )A. 2
(X)B. 1
( )C. 4
( )D. -1
✔️ The method indexOf returns the first position of the passed str in the current string starting from the left (from 0).
Activity: 2.7.1.2 Multiple Choice (qsb_3)
2-7-3: What is the value of len after the following code executes?
String s1 = "baby";
int len = s1.length();
( )A. 2
( )B. 3
(X)C. 4
( )D. -1
Activity: 2.7.1.3 Multiple Choice (qsb_3b)
2-7-4: What is the value of s2 after the following code executes?
String s1 = "baby";
String s2 = s1.substring(0,3);
( )A. baby
( )B. b
( )C. ba
(X)D. bab
Activity: 2.7.1.4 Multiple Choice (qsb_3c)
2-7-5: What is the value of s2 after the following code executes?
String s1 = "baby";
String s2 = s1.substring(2);
(X)A. by
( )B. aby
( )C. a
( )D. b
( )E. ba
Activity: 2.7.1.5 Multiple Choice (qsb_4b)
2.7.2. CompareTo and Equals
We can compare primitive types like int and double using operators like == and < or >, which you will learn about in the next unit. However, with reference types like String, you must use the methods equals and compareTo, not == or < or >.
The method compareTo compares two strings character by character. If they are equal, it returns 0. If the first string is alphabetically ordered before the second string (which is the argument of compareTo), it returns a negative number. And if the first string is alphabetically ordered after the second string, it returns a positive number. (The actual number that it returns does not matter, but it is the distance in the first letter that is different, e.g. A is 7 letters away from H.)

Figure 2: compareTo returns a negative or positive value or 0 based on alphabetical order
The equals method compares the two strings character by character and returns true or false. Both compareTo and equals are case-sensitive. There are case-insensitive versions of these methods, compareToIgnoreCase and equalsIgnoreCase, which are not on the AP exam.
Run the example below to see the output from compareTo and equals. Since “Hello!” would be alphabetically ordered after “And”, compareTo returns a positive number. Since “Hello!” would be alphabetically ordered before “Zoo”, compareTo returns a negative number. Notice that equals is case-sensitive.
Run the code to see how the String methods equals and compareTo work. Is equals case-sensitive? When does compareTo return a negative number?
1
public class Test2
2
{
3
   public static void main(String[] args)
4
   {
5
     String message = "Hello!";
6
​
7
     System.out.println(message.compareTo("Hello!"));
8
     System.out.println(message.compareTo("And"));
9
     System.out.println(message.compareTo("Zoo"));
10
​
11
     System.out.println(message.equals("Hello!"));
12
     System.out.println(message.equals("hello!"));
13
   }
14
}
15
​
Activity: 2.7.2.1 ActiveCode (lcsm2)
There are lots of other methods in the String class. You can look through the Java documentation for the String class online. You don’t have to know all of these for the exam, but you can use them if you want to on the exam.
An Application Programming Interface (API) is a library of prewritten classes that simplify complex programming tasks for us. These classes are grouped together in a package like java.lang and we can import these packages (or individual classes) into our programs to make use of them. For instance, we have just discussed the String library built into the default java.lang package - it takes care of the detailed work of manipulating strings for us. There are many other useful library packages as well, both in the java.lang package and in other packages. Documentation for APIs and libraries are essential to understanding how to use these classes.
Note
Strings are immutable which means that they can’t change. Anything that you do to modify a string (like creating a substring or appending strings) returns a new string.
 Check your understanding
2-7-7: Drag the definition from the left and drop it on the correct concept on the right. Click the "Check Me" button to see if you are correct
length: the number of characters in a string
substring: a new string that is a part of another string with 0 to all characters copied from the original string
immutable: doesn't change
index: the position of a character in a string
Activity: 2.7.2.2 Drag-N-Drop (ch4_str1)

2-7-8: Drag the definition from the left and drop it on the correct method on the right. Click the "Check Me" button to see if you are correct.
toString: Returns a string representing the object that is passed to this method
compareTo: Returns a number to indicate if one string is less than, equal to, or greater than another
indexOf: Returns the position of one string in another or -1
equals: Returns true if the characters in two strings are the same
Activity: 2.7.2.3 Drag-N-Drop (ch4_str2)

2-7-9: What is the value of s2 after the following code executes?
String s1 = new String("hi there");
int pos = s1.indexOf("e");
String s2 = s1.substring(0,pos);
( )A. hi th
(x)B. hi the
( )C. hi ther
( )D. hi there
Activity: 2.7.2.4 Multiple Choice (qsb_5)
2-7-10: What is the value of s1 after the following code executes?
String s1 = "Hi";
String s2 = s1.substring(0,1);
String s3 = s2.toLowerCase();
(X)A. Hi
( )B. hi
( )C. H
(x)D. h
Strings are immutable, meaning they don't change. Any method that changes a string returns a new string. So s1 never changes.
Activity: 2.7.2.5 Multiple Choice (qsb_6-old1)
2-7-11: What is the value of s3 after the following code executes?
String s1 = "Hi";
String s2 = s1.substring(0,1);
String s3 = s2.toLowerCase();
( )A. Hi
( )B. hi
( )C. H
(X)D. h
Activity: 2.7.2.6 Multiple Choice (qsb_7-old24)
2-7-12: What is the value of answer after the following code executes?
String s1 = "Hi";
String s2 = "Bye";
int answer = s1.compareTo(s2);
(X)A. positive (> 0)
( )B. 0
( )C. negative (< 0)
Activity: 2.7.2.7 Multiple Choice (qsb_8-new)
2.7.3. Common Mistakes with Strings
The following code shows some common mistakes with strings.
This code contains some common mistakes with strings. Fix the code to use the string methods correctly.
1
public class StringMistakes
2
{
3
   public static void main(String[] args)
4
   {
5
     String str1 = "Hello!";
6
​
7
     // Print out the first letter?
8
     System.out.println("The first letter in " + str1 + ":" + str1.substring(0,1) );
9
​
10
     // Print out the last character?
11
     System.out.println("The last char. in " + str1 + ":" + str1.substring(5) );
12
​
13
     // Print str1 in lower case? Will str1 change?
14
     String str1Lower = str1.toLowerCase();
15
     System.out.println("In lowercase: " + str1Lower);
16
​
17
   }
18
}
19
​
Activity: 2.7.3.1 ActiveCode (stringMistakes)
Here is a list of common mistakes made with Strings.
• Thinking that substrings include the character at the last index when they don’t.
• Thinking that strings can change when they can’t. They are immutable.
• Trying to access part of a string that is not between index 0 and length -1. This will throw an IndexOutOfBoundsException.
• Trying to call a method like indexOf on a string reference that is null. You will get a null pointer exception.
• Using == to test if two strings are equal. This is actually a test to see if they refer to the same object. Usually you only want to know if they have the same characters in the same order. In that case you should use equals or compareTo instead.
• Treating upper and lower case characters the same in Java. If s1 = "Hi" and s2 = "hi" then s1.equals(s2) is false.
2.7.4.  Programming Challenge : Pig Latin
 Can you speak Pig Latin? In Pig Latin, you take the first letter and put it at the end of the word and add the letters “ay” to the end. For example, “pig” becomes “igpay”.
Create a program that takes a word and transforms it to Pig Latin using String methods. You may need the word’s length, a substring that does not include the first letters1.substring(, and a substring that is just the first letter (you can get the ith letter of a string using substring(i,i+1) so for example the letter at index 3 would be substring(3,4)).
Your teacher may ask you to create this program in a Java IDE like repl.it so that you can use input to read in the word (see input examples using the Scanner class).
Use the substring method to transform a word into Pig Latin where the first letter is put at the end and “ay” is added. The word pig is igpay in Pig Latin.
Save & RunLoad HistoryShow CodeLensShare Code
1
public class PigLatin
2
{
3
   public static void main(String[] args)
4
   {
5
​
6
       String word = "derrick";
7
​
8
       // Use word.substring to construct word in pig latin
String firstLetter = word.substring(0,1);
String lastLetters = word.substring(1,word.lenght());
String suffix = "ay";
9
       String pigLatin = lastLetters+firstLetter+suffix;
10
​
11
       System.out.println(word + " in Pig Latin is " + pigLatin);
12
   }
13
}
14
​
Activity: 2.7.4.1 ActiveCode (challenge2-7-PigLatin)
2.7.5. Summary
• index - A number that represents the position of a character in a string. The first character in a string is at index 0.
• length - The number of characters in a string.
• substring - A new string that contains a copy of part of the original string.
• A String object has index values from 0 to length – 1. Attempting to access indices outside this range will result in an IndexOutOfBoundsException.
• String objects are immutable, meaning that String methods do not change the String object. Any method that seems to change a string actually creates a new string.
• The following String methods and constructors, including what they do and when they are used, are part of the AP CS A Java Quick Reference Sheet that you can use during the exam:
◦ String(String str) : Constructs a new String object that represents the same sequence of characters as str.
◦ int length() : returns the number of characters in a String object.
◦ String substring(int from, int to) : returns the substring beginning at index from and ending at index (to -1).
◦ String substring(int from) : returns substring(from, length()).
◦ int indexOf(String str) : searches for str in the current string and returns the index of the first occurrence of str; returns -1 if not found.
◦ boolean equals(String other) : returns true if this (the calling object) is equal to other; returns false otherwise.
◦ int compareTo(String other) : returns a value < 0 if this is less than other; returns zero if this is equal to other; returns a value > 0 if this is greater than other.
• str.substring(index, index + 1) returns a single character at index in string str.
2.7.6. String Methods Game
Try the game below written by AP CSA teacher Chandan Sarkar. Click on Strings and then on the letters that would be the result of the string method calls. We encourage you to work in pairs and see how high a score you can get.


Joel Perry, USAF Retired
Computer Science Teacher
Westminster High School
1225 Washington Road
Westminster, MD 21157
